#jinja2:lstrip_blocks: True
---
# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
{% if monitoring_alertmanager_enabled | default(true) %}
# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:{{ monitoring_alertmanager_port }}']
{% endif %}

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
    - /etc/prometheus/alert_rules.yml
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:

  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:{{ monitoring_prometheus_port }}']

  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "hardware_metrics"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
       - targets: [{% if monitoring_server_inventory_group in groups %}{% for host in groups[monitoring_server_inventory_group] %}'{{ hostvars[host]['monitoring_advertise_address'] | default(hostvars[host]['ansible_host']) }}:{{ monitoring_node_exporter_port }}', {% endfor %}{% endif %}{% if monitoring_targets_inventory_group in groups %}{% for host in groups[monitoring_targets_inventory_group] %}'{{ hostvars[host]['monitoring_advertise_address'] | default(hostvars[host]['ansible_host']) }}:{{ monitoring_node_exporter_port }}'{% if loop.last %}{% else %}, {% endif %}{% endfor %}{% endif %}]
{% if monitoring_cadvisor_enabled | default(true) %}
  - job_name: "container_metrics"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
       - targets: [{% if monitoring_server_inventory_group in groups %}{% for host in groups[monitoring_server_inventory_group] %}'{{ hostvars[host]['monitoring_advertise_address'] | default(hostvars[host]['ansible_host']) }}:{{ monitoring_cadvisor_port }}', {% endfor %}{% endif %}{% if monitoring_targets_inventory_group in groups %}{% for host in groups[monitoring_targets_inventory_group] %}'{{ hostvars[host]['monitoring_advertise_address'] | default(hostvars[host]['ansible_host']) }}:{{ monitoring_cadvisor_port }}'{% if loop.last %}{% else %}, {% endif %}{% endfor %}{% endif %}]
{% endif %}
{% if monitoring_blackbox_enabled | default(true) %}
  - job_name: blackbox # To get metrics about the exporter itself
    metrics_path: /metrics
    static_configs:
      - targets: [{% if monitoring_server_inventory_group in groups %}{% for host in groups[monitoring_server_inventory_group] %}'{{ hostvars[host]['monitoring_advertise_address'] | default(hostvars[host]['ansible_host']) }}:{{ monitoring_blackbox_port }}'{% if loop.last %}{% else %}, {% endif %}{% endfor %}{% endif %}]
  - job_name: blackbox-http # To get metrics about the exporterâ€™s targets
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
    - targets:
  {% for server in monitoring_blackbox_endpoints %}
      - {{ server }}
  {% endfor %}
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: {{ ansible_default_ipv4.address }}:{{ monitoring_blackbox_port }}
{% endif %}
